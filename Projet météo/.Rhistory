runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("magick")
runApp()
runApp()
install.packages("imager")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getw()
getwd()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp('~/evaluation/weather-station-dashboard-master')
install.packages("openair")
runApp('~/evaluation/weather-station-dashboard-master')
install.packages("RODBC")
runApp('~/evaluation/weather-station-dashboard-master')
runApp()
runApp()
runApp()
runApp()
install.packages("tidyverse")
install.packages("patchwork")
install.packages("owmr")
install.packages("zoo")
install.packages("lubridate")
install.packages("emojifont")
shiny::runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/shiny_weather_dashboard-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp()
install.packages("shinycssloaders")
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
runApp()
install.packages("rintrojs")
runApp()
runApp()
install.packages("shinyBS")
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
runApp()
runApp()
install.packages("AMR")
runApp()
install.packages("ggridges")
runApp()
install.packages("plotly")
runApp()
install.packages("qicharts2")
runApp()
install.packages("ggpubr")
runApp()
install.packages("survminer")
runApp()
install.packages("viridis")
runApp()
install.packages("viridisLite")
shiny::runApp()
install.packages("viridisLite")
shiny::runApp()
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
rlang::last_error()
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
runApp('~/evaluation/radar-master')
renv::restore()
renv::restore()
renv::restore()
restore()
env::restore()
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
renv::restore()
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
renv::restore()
renv::restore()
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("modules")
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("dygraphs")
install.packages("dygraphs")
install.packages("dygraphs")
install.packages("dygraphs")
install.packages("dygraphs")
install.packages("dygraphs")
shiny::runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("dplyr")
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("tidyr")
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("lubridate")
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("ggplot2")
runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("xts")
shiny::runApp('~/evaluation/shiny-enterprise-dashboard')
install.packages("echarts4r")
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny-enterprise-dashboard')
runApp('~/evaluation/shiny_weather_dashboard-master')
library(shiny); runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
Sys.setenv(OWM_API_KEY = "af2f6b280ae76a3d215f081e0c014235")
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city.R')
runApp('search_city2.R')
runApp('search_city.R')
runApp('search_city2.R')
runApp('search_city.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city2.R')
runApp('search_city.R')
library(shiny); runApp('dash_mongo.R')
## insertion les données de l'API forcast  ""
library(httr)
#library(jsonlite)
library(mongolite)
library(rjson)
villes=c("Paris","Lyon","Nice",
"Strasbourg",
"Bordeaux ",
"Le Havre",
"Lille",
"Angers",
"Brest",
"Nîmes",
"Marseille",
"Toulouse",
"Nantes",
"Montpellier",
"Rennes",
"Saint-Étienne",
"Dijon",
"Amiens",
"Rouen"
)
codeville=c(2988507,
2996943,
2990439,
2973783,
3031582,
3003796,
2998324,
3037656,
6448047,
2990362,
2995468,
2972315,
2990968,
2992166,
2983989,
2980288,
3021372,
3037854,
2982652
)
for (item in  codeville) {
# recupération de l'api
res = GET(paste0("https://api.openweathermap.org/data/2.5/weather?id=",item,"&APPID=af2f6b280ae76a3d215f081e0c014235"))
#print(res$content)
data = fromJSON(rawToChar(res$content))
class(data)
#df=data.frame(data)
visibility=data$visibility
main=data.frame(data$main)
coord=data.frame(data$coord)
#View(coord)
weather=data.frame(data$weather)
#print(weather[1,])
wind=data.frame(data$wind)
clouds=data.frame(data$clouds)
sys=data.frame(data$sys)
id=data$id
name=data$name
df=data.frame(
id=id,
name=name,
visibility=visibility
)
df$main=main
df$wind=wind
df$sys=sys
df$weather=weather[1,]
#View(weather)
df$clouds=clouds
df$coord=coord
nrow(df)
x=toJSON(df)
# creation d'une collection forcast
weatherCollection = mongo(collection = "CWeather", db = "test")
# get first document
# verifier l'existance du document par son identifiant
nb=weatherCollection$count(query = paste0('
{
"id": ',item,'
}'))
# si le document n'existe pas , on insere un nouveau
if(nb==0){
weatherCollection$insert(df)
}
#sinon on remplace le document par un nouveau
if(nb==1){
weatherCollection$replace(query = paste0('
{
"id": ',item,'
}'), update=toJSON(df))
}
}
#print(mongo(db = "test"))
#print(weatherCollection$find(limit=1))
runApp('dash_mongo.R')
## insertion les données de l'API forcast  ""
library(httr)
#library(jsonlite)
library(mongolite)
library(rjson)
villes=c("Paris","Lyon","Nice",
"Strasbourg",
"Bordeaux ",
"Le Havre",
"Lille",
"Angers",
"Brest",
"Nîmes",
"Marseille",
"Toulouse",
"Nantes",
"Montpellier",
"Rennes",
"Saint-Étienne",
"Dijon",
"Amiens",
"Rouen"
)
codeville=c(2988507,
2996943,
2990439,
2973783,
3031582,
3003796,
2998324,
3037656,
6448047,
2990362,
2995468,
2972315,
2990968,
2992166,
2983989,
2980288,
3021372,
3037854,
2982652
)
for (item in  codeville) {
# recupération de l'api
res = GET(paste0("https://api.openweathermap.org/data/2.5/weather?id=",item,"&APPID=af2f6b280ae76a3d215f081e0c014235"))
#print(res$content)
data = fromJSON(rawToChar(res$content))
class(data)
#df=data.frame(data)
visibility=data$visibility
main=data.frame(data$main)
coord=data.frame(data$coord)
#View(coord)
weather=data.frame(data$weather)
#print(weather[1,])
wind=data.frame(data$wind)
clouds=data.frame(data$clouds)
sys=data.frame(data$sys)
id=data$id
name=data$name
df=data.frame(
id=id,
name=name,
visibility=visibility
)
df$main=main
df$wind=wind
df$sys=sys
df$weather=weather[1,]
#View(weather)
df$clouds=clouds
df$coord=coord
nrow(df)
x=toJSON(df)
# creation d'une collection forcast
weatherCollection = mongo(collection = "CWeather", db = "test")
# get first document
# verifier l'existance du document par son identifiant
nb=weatherCollection$count(query = paste0('
{
"id": ',item,'
}'))
# si le document n'existe pas , on insere un nouveau
if(nb==0){
weatherCollection$insert(df)
}
#sinon on remplace le document par un nouveau
if(nb==1){
weatherCollection$replace(query = paste0('
{
"id": ',item,'
}'), update=toJSON(df))
}
}
#print(mongo(db = "test"))
#print(weatherCollection$find(limit=1))
## insertion les données de l'API forcast  ""
library(httr)
library(jsonlite)
library(mongolite)
villes=c("Paris","Lyon","Nice",
"Strasbourg",
"Bordeaux ",
"Le Havre",
"Lille",
"Angers",
"Brest",
"Nîmes",
"Marseille",
"Toulouse",
"Nantes",
"Montpellier",
"Rennes",
"Saint-Étienne",
"Dijon",
"Amiens",
"Rouen"
)
codeville=c(2988507,
2996943,
2990439,
2973783,
3031582,
3003796,
2998324,
3037656,
6448047,
2990362,
2995468,
2972315,
2990968,
2992166,
2983989,
2980288,
3021372,
3037854,
2982652
)
for (item in  codeville) {
#print(item)
# recupération de l'api
res = GET(paste0("https://api.openweathermap.org/data/2.5/forecast?id=",item,"&APPID=af2f6b280ae76a3d215f081e0c014235"))
#print(res$content)
data = fromJSON(rawToChar(res$content))
#cat(toJSON(data))
#class(data)
#print(data)
city=data$city
#View(data)
forcast=data$list
#class(forcast)
#View(forcast)
# visualiser la structure
#dput(head(forcast))
# creation d'une collection forcast
forcastCollection = mongo(collection = "forcast", db = "test")
# get first document
#df2 = forcastCollection$find(limit=1)
# visualiser la structure du dataframe
#dput(head(df2))
# insert API data in collection
ID=c("1")
df <- data.frame(ID)
# create le document du mongodb sou forme du datafrmae (chaque ligne dans le DF represente un document)
ville=data.frame(name=c(city$name),
id=city$id,
coord=city$coord,
sunrise=c(city$sunrise),
sunset=c(city$sunset)
)
df$city <- ville
#View(df)
df$list <-list(data$list)
#View(list(data$list))
#dput(head(list(data.frame(data$list))))
#View(list(data.frame(data$list)))
# insertion du document dans la collection
nb= forcastCollection$count(query = paste0('
{
"city.id": ',item,'
}'))
if(nb==0){
forcastCollection$insert(toJSON(data))
}
if(nb==1){
forcastCollection$replace(query = paste0('
{
"city.id": ',item,'
}'), update=toJSON(data))
}
}
#print(weatherCollection$find(limit=1))
runApp('dash_mongo.R')
shiny::runApp()
runApp()
