library(shiny)
library(shinydashboard)
library(mongolite)
library(shinyWidgets)

#if(!require('shinyWidgets')) {
#  install.packages('shinyWidgets')
#  library('shinyWidgets')
#}


signs <- c( 'aries'      , 'taurus'   ,'gemini'   , 'cancer' ,
            'leo'        ,  'virgo'   ,'libra'    , 'scorpio',
            'sagittarius', 'capricorn', 'aquarius', 'pisces')


images_cute <- c(
  "aries.png",
  "taurus.png",
  "gemini.png",
  "cancer.png",
  "leo.png",
  "virgo.png",
  "libra.png",
  "scorpio.png",
  "sagittarius.png",
  "capricorn.png",
  "aquarius.png",
  "pisces.png"
  
)


#### Dashboard UI ####
ui <- dashboardPage(
  
  dashboardHeader(title = "Dashboard"),
  
  dashboardSidebar(
    
    
    sidebarMenu(
      #sidebar menu for the horoscope
      menuItem(text = "Horoscope", tabName = "horoscope" ) # could add icon
    )
    
    
  ),
  
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "horoscope",
        p("this is where everything will be shown "),
        fluidRow(
          column(width = 2,
                 align = "center",
                 ##here the pickerInput starts
                 #selectInput("sign", "Select your sign", signs)
                 pickerInput("sign", "sign", 
                             choices = signs,
                             choicesOpt = list(
                               content = mapply(signs, images_cute, FUN = function(si, im){
                                 (paste(
                                   img(src = im, width = 50, height = 40),
                                   toupper(si)
                                 ))
                               }, SIMPLIFY = FALSE, USE.NAMES = FALSE )
                             ), 
                             width = 250
                             )
                 
                 ##here the pickerInput ends
                 ),  #here ends the column
          
     
          column(
            width = 8,
            offset = 2,
            align = "center",
            box(
            em(h3(textOutput("my_sign"))),
            imageOutput("preImage", height = 250, width = 350  ),
            background = "navy"
            ),
         )
          
        
        ),
        fluidRow(
          column(
            align = "center",
            width = 8,
            offset = 4,
            box( title = strong("Description"),
                 h3(textOutput("descr")), background = "navy", height = 225)
          )
        ),
        
        fluidRow(
          column(
            offset = 3,
            width = 3,
            infoBoxOutput("compatibility", width = 10),
            
          ),
          column(
            offset = 1,
            width = 3,
            infoBoxOutput("mood", width = 10)
          )
        ),
        
        fluidRow(
          column(
            offset  = 2,
            width = 3,
            valueBoxOutput("lucky_nb", width = 10)
          ),
          column(
            width = 3,
            infoBoxOutput("lucky_color", width = 10)
          ),
          column(
            width = 3,
            valueBoxOutput("lucky_time", width = 10)
          )
          
        )

      )
    )
    
  )
  
)

#### Server Logic ----
server <- function(input, output) {
  
  # get connected to the db
  signdb <- mongo(collection = "horoscope", db = "AKZN")  
  
  #create a reactive function to the sign chosen
  my_sign <- reactive({
    as.character(input$sign)
    
  })
  
 
  #return the name of the sign
  output$my_sign <- renderText(
    toupper(my_sign())
  ) 
  
  #return the description of the sign
  output$descr <- renderText(
    (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$description
  
  )
  
  #return the image file i want to show
  output$preImage <- renderImage({
    # When input$n is 3, filename is ./images/image3.jpeg
    filename <- normalizePath(file.path("stars/",
                                        paste(my_sign(), '.png', sep='')))
    
    # Return a list containing the filename and alt text
    list(src = filename,
         alt = paste("Selected Sign", my_sign()))
    
  }, deleteFile = FALSE)
  
  
  # filling the infoBoxes and ValueBoxes --
  
  #compatibility -
  output$compatibility <- renderInfoBox(
    infoBox(
      title = "Compatible with ",
      value = (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$compatibility,
      icon = icon("heart"),
      color = "maroon"
      #value subtitle fill ...
    )
  )
  
  #mood -
  output$mood <- renderInfoBox(
    infoBox(
      title = "today's mood : ",
      value = (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$mood,
      icon = icon("face-smile"),
      color = "yellow"
      
      #color ...
    )
  )
  
  #lucky number
  output$lucky_nb <- renderValueBox(
    valueBox(
      value = (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$lucky_number,
      subtitle =  "is your lucky number ",
      icon = icon("clover"),
      color = "green"
      
    )
  )
  
  #lucky color
  output$lucky_color <- renderInfoBox(
    infoBox(
      value = (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$color,
      title = "today's lucky color ",
      icon = icon("palette"),
      color = "teal"
      #color ...
     
    )
  )
  
  #lucky time
  output$lucky_time <- renderValueBox(
    valueBox(
      value = (signdb$find( paste0( '{ "sign_name" : "', my_sign(), '" }' ) ) )$lucky_time,
      subtitle =  "is your lucky time ",
      icon = icon("clock", lib = "font-awesome"),
      color = "purple"
    )
  )
  
}


#### Launching App ----
shinyApp(ui, server)
